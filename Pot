#include "mbed.h"
#include "SparkFun_MCP9600.h"
#include "Servo.h"
#include "TextLCD.h"

MCP9600 tempSensor;
Servo ventServo;
TextLCD lcd(p15, p16, p17, p18, p19, p20, TextLCD::LCD20x4); // Replace with your LCD pin configuration

const int switchLight = 2;  // Digital pin for Light Roast switch
const int switchMedium = 3; // Digital pin for Medium Roast switch
const int switchDark = 4;   // Digital pin for Dark Roast switch

const float rateOfRiseThreshold1 = 0.23333; // First threshold for rate of rise
const float rateOfRiseThreshold2 = 0.3;    // Second threshold for rate of rise
const int numSamples = 20;                 // Number of temperature samples to keep
const int interval = 100;                 // Interval in milliseconds (0.1 seconds)
float temperatures[numSamples];            // Array to store temperature samples
float lastRateOfRise = 0;

//PERCENT DONE ARRAYS FOR LCD SCREEN READING 
const float temperatureValues[] = {
0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216
};

const float percentCompleteLight[] = {
0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100
};

const float percentCompleteMedium[] = {
0,1,2,3,4,5,6,7,8,9,10,11,12,13,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,88,89,90,91,92,93,94,95,96,97,98,99,100
};

const float percentCompleteDark[] = {
0,1,2,3,4,5,6,7,7,8,9,10,11,12,13,14,15,16,17,18,19,20,20,21,22,23,24,25,26,27,28,29,30,31,32,33,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,47,48,49,50,51,52,53,54,55,56,57,58,59,60,60,61,62,63,64,65,66,67,68,69,70,71,72,73,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,87,88,89,90,91,92,93,94,95,96,97,98,99,100,100
};

void displayInfo(float temperature, float percentComplete, int rpm, int roastType) {
  // Clear the LCD screen
  lcd.cls();

  // Display the temperature
  lcd.printf("Temperature: %.2f C", temperature);

  // Display percent complete based on roast type
  lcd.locate(0, 1); // Move to the second line
  if (roastType == 0) { // Light Roast
    lcd.printf("Percent Light: %.2f%%", percentComplete);
  } else if (roastType == 1) { // Medium Roast
    lcd.printf("Percent Medium: %.2f%%", percentComplete);
  } else if (roastType == 2) { // Dark Roast
    lcd.printf("Percent Dark: %.2f%%", percentComplete);
  }

  // Display the RPM as a heart symbol
  lcd.locate(0, 2); // Move to the third line
  lcd.printf("RPM: %d \3", rpm); // \3 is the heart symbol
}

float calculateRateOfRise() {
  float temp1 = 0;
  float temp2 = 0;

  for (int i = 0; i < numSamples / 2; i++) {
    temp1 += temperatures[i];
    temp2 += temperatures[i + numSamples / 2];
  }
  temp1 /= numSamples / 2;
  temp2 /= numSamples / 2;

  return ((temp2 - temp1) / (interval / 1000.0)) / 2;
}

void setup() {
  // Initialize the temperature sensor
  tempSensor.begin(0x60); // Use the I2C address appropriate for your setup
  tempSensor.measureOnce();
}

void loop() {
  for (int i = numSamples - 1; i > 0; i--) {
    temperatures[i] = temperatures[i - 1];
  }

  temperatures[0] = tempSensor.getTemperature();
  float rateOfRise = calculateRateOfRise();

  if (lastRateOfRise > rateOfRiseThreshold2 && rateOfRise > rateOfRiseThreshold2) {
    ventServo.write(90); // Open the vent fully
  } else if (lastRateOfRise > rateOfRiseThreshold1 && rateOfRise > rateOfRiseThreshold1) {
    ventServo.write(45); // Open the vent halfway
  } else {
    ventServo.write(0); // Close the vent
  }

  lastRateOfRise = rateOfRise; // Update the last rate of rise for the next iteration

  // Your main loop code can be added here.
  // Read the state of the switches (assuming they are connected to digital pins)
  int switch1State = digitalRead(2); // Switch 1 on digital pin 2
  int switch2State = digitalRead(3); // Switch 2 on digital pin 3
  int switch3State = digitalRead(4); // Switch 3 on digital pin 4

  // Update the roastType based on the switch states
  if (switch1State == HIGH) {
    roastType = 0; // Light Roast
  } else if (switch2State == HIGH) {
    roastType = 1; // Medium Roast
  } else if (switch3State == HIGH) {
    roastType = 2; // Dark Roast
  }

  // Calculate percent complete based on the recorded temperature
  int tempIndex = -1;
  for (int i = 0; i < sizeof(temperatureValues) / sizeof(temperatureValues[0]); i++) {
    if (temperatureValues[i] == temperatures[0]) {
      tempIndex = i;
      break;
    }
  }

  float percentComplete = 0;

  if (tempIndex >= 0) {
    if (roastType == 0) {
      percentComplete = percentCompleteLight[tempIndex];
    } else if (roastType == 1) {
      percentComplete = percentCompleteMedium[tempIndex];
    } else if (roastType == 2) {
      percentComplete = percentCompleteDark[tempIndex];
    }
  }

  // Update the LCD display with temperature, rate of rise, and percent complete information
  displayInfo(temperatures[0], percentComplete, 70, roastType);

  delay(100); // Adjust the delay as needed
}

int main() {
  setup();

  while (1) {
    loop();
  }
}
